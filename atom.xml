<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hhfan的博客</title>
  <subtitle>分享知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fanjinbo.github.io/"/>
  <updated>2016-11-25T09:21:13.296Z</updated>
  <id>http://fanjinbo.github.io/</id>
  
  <author>
    <name>fanjinbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring实战读书笔记</title>
    <link href="http://fanjinbo.github.io/2016/11/25/Spring%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://fanjinbo.github.io/2016/11/25/Spring实战读书笔记/</id>
    <published>2016-11-25T08:01:40.000Z</published>
    <updated>2016-11-25T09:21:13.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring的策略"><a href="#Spring的策略" class="headerlink" title="Spring的策略"></a>Spring的策略</h2><ul>
<li>基于POJO的轻量级和最小侵入性编程</li>
<li>通过依赖注入和面向接口实现松耦合</li>
<li>基于切面和惯例进行声明式编程</li>
<li>通过切面和模板减少样板式代码</li>
</ul>
<p>Spring竭力避免因自身的API而弄乱你的应用代码，不会强迫你实现Spring规范的接口或者接成Spring规范的类。使用Spring通常从代码层不会表现出任何你使用了Spring框架这件事情。最坏的场景是一个类或许会使用Spring的注解，但是它依旧是POJO。<br>– public class BraveKnight implements</p>
<h2 id="自动装配Bean属性（Page-65）"><a href="#自动装配Bean属性（Page-65）" class="headerlink" title="自动装配Bean属性（Page.65）"></a>自动装配Bean属性（Page.65）</h2><h4 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h4><p>配置<bean>元素autowire=”byName”<br>把与Bean属性具有相同名字（或者id）的其他Bean自动装配到Bean的对应属性中去。</bean></p>
<h4 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h4><p>配置<bean>元素autowire=”byType”<br>把与Bean属性具有相同类型的其他Bean自动装配到Bean的对应属性中去。.<br>Tips：byType装配有一个局限性就是如果有Spring找到多个Bean的类型与待装配的Bean的属性的类型一致的话，Spring会抛出异常。为了避免这种异常，Spring提供了两种选择：</bean></p>
<ol>
<li>为自动装配标识一个首选的Bean，可以使用<bean>元素的primary属性，设置唯一一个首选的Bean的primary为true，其他的都要设置为false。primary的默认属性就是true。</bean></li>
<li>排除某些Bean。将想要排除的Bean的autowire-candidate属性设置为false。</li>
</ol>
<h4 id="consructor自动装配"><a href="#consructor自动装配" class="headerlink" title="consructor自动装配"></a>consructor自动装配</h4><p>配置<bean>元素autowire=”constructor”，移除<constructor-arg>配置。<br>Spring将会自动搜寻与这个Bean某一个构造函数入参类型相同的Bean来自动装配，将找到的Bean作为入参传入。<br>但是如果匹配到多个Bean或者有多个构造函数都满足匹配的话Spring不会去处理这些问题（待具体代码测试，书上也没有写清楚）。</constructor-arg></bean></p>
<h4 id="最佳自动装配"><a href="#最佳自动装配" class="headerlink" title="最佳自动装配"></a>最佳自动装配</h4><p>配置<bean>元素autowire=”autodetect”<br>Spring会首先尝使用constructor自动装配，如果没有匹配到的话就用byType来自动装配。</bean></p>
<h3 id="默认自动装配"><a href="#默认自动装配" class="headerlink" title="默认自动装配"></a>默认自动装配</h3><p>在<beans>上增加一个default-autowire属性。默认是没有此项属性的。单独的<bean>上可以再次设置装配规则来覆盖全局属性。</bean></beans></p>
<h3 id="混合装配"><a href="#混合装配" class="headerlink" title="混合装配"></a>混合装配</h3><p>可以使用手动配置属性装配来覆盖自动装配。<br>优先级依次为<br>手动装配–&gt; 自动装配 –&gt;全局自动装配</p>
<h2 id="使用注解装配"><a href="#使用注解装配" class="headerlink" title="使用注解装配"></a>使用注解装配</h2><p>###@Autowired<br>进行byType的自动装配<br>可以用如下几种方法来进行标记：</p>
<ol>
<li>不限于setter方法，还可以自动装配Bean的任何方法。</li>
<li>构造器方法。</li>
<li>标注属性，并删除setter方法。对private属性也可以标注。</li>
</ol>
<p>使用@Autowired装配需要主要的是。如果对标注的属性或者参数没有找到可以装配的Bean将会抛出NoSuchBeanDefinitionException。或者设置<br><code>@Autowired(required=false)</code><br>如果找不到对应的Bean，则将属性设置为null。<br>tips：标注多个构造器的时候会优先选择入参匹配到最多的构造器方法。</p>
<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p>如果装配过程中遇到了多个Bean符合的情况就会抛出异常，不过Spring提供了@Qualifier这个标注来处理这种情况。使用@Qualifier(“beanId”)，可以在装配过程中优先选择Bean id为”beanId“的Bean来进行装配。还可以指定某个Bean的<bean>中的<qualifier>元素为某个别名，这样@Qualifier也可以配置为这个别名。<br>例如：<br><code>&lt;bean class=&quot;XXX&quot;&gt;
  &lt;qualifier value=&quot;namex&quot;&gt;
&lt;/bean&gt;
@Autowired
@Qulifier(&quot;namex&quot;)</code></qualifier></bean></p>
<h4 id="自定义-Qualifier"><a href="#自定义-Qualifier" class="headerlink" title="自定义@Qualifier"></a>自定义@Qualifier</h4><p>直接贴代码：</p>
<p>`</p>
<pre><code>import org.springframework.beans.factory.annotation.Qualifier;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target({ElementType.FIELD, ElementType.PARAMETER,ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)
@Qualifier
public @interface QulifierTest {
} `
</code></pre><p>tips：上面的@interface是java自带的自定义的annotation用的，不是interface<br>然后直接对Bean进行@QulifierTest注解，再在要装配的Bean进行如下注解<br><code>@Autowired
@QulifierTest</code><br>这样装配的时候就会选择用@QulifierTest标注过的Bean。</p>
<h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p>这个注解等价于在XML文件中的<bean>配置，方法名作为Bean的id。可以将其他Bean在构造器或者参数中传入，并且Spring在注入的时候会在上下文检查注入的Bean是否已经被生成过了，如果生成过则会去调用之前生成的Bean，并不是去重新创建一个。</bean></p>
<h2 id="面向切面的Spring"><a href="#面向切面的Spring" class="headerlink" title="面向切面的Spring"></a>面向切面的Spring</h2><p>###</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring的策略&quot;&gt;&lt;a href=&quot;#Spring的策略&quot; class=&quot;headerlink&quot; title=&quot;Spring的策略&quot;&gt;&lt;/a&gt;Spring的策略&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于POJO的轻量级和最小侵入性编程&lt;/li&gt;
&lt;li&gt;通过依赖注入和面
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java I/O 学习总结</title>
    <link href="http://fanjinbo.github.io/2016/11/23/Java-I-O-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://fanjinbo.github.io/2016/11/23/Java-I-O-学习总结/</id>
    <published>2016-11-23T09:56:24.000Z</published>
    <updated>2016-11-25T08:01:16.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-listFiles-源码分析"><a href="#File-listFiles-源码分析" class="headerlink" title="File.listFiles()源码分析"></a>File.listFiles()源码分析</h2><pre><code>public File[] listFiles() {
    String[] ss = list();
    if (ss == null) return null;
    int n = ss.length;
    File[] fs = new File[n];
    for (int i = 0; i &lt; n; i++) {
        fs[i] = new File(ss[i], this);
    }
    return fs;
}

public String[] list() {
        SecurityManager security = System.getSecurityManager(); //获取系统安全接口
        if (security != null) {
            security.checkRead(path);
            //判断线程是否有读取文件的权限,权限可以自己去用System.setSecurityManager(SecurityManager  Object)去set
        }
        if (isInvalid()) {
            return null;
        }
        return fs.list(this);
    }

final boolean isInvalid() {
        if (status == null) {
            status = (this.path.indexOf(&apos;\u0000&apos;) &lt; 0) ? PathStatus.CHECKED
                                                       : PathStatus.INVALID;
        }
        return status == PathStatus.INVALID;
}

public void checkRead(String file) {
        checkPermission(new FilePermission(file,
            SecurityConstants.FILE_READ_ACTION));
}

public abstract String[] list(File f);

@Override
public native String[] list(File f);//调用的系统原生方法，要具体去看jdk的源码或者监控dll调用，
                                    // 反正只要明白此处使用的是操作系统原生的方法
</code></pre><p>checkRead<br>public void checkRead(String file)<br>如果不允许调用线程读取由字符串参数指定的文件，则抛出 SecurityException。<br>此方法用 FilePermission(file,”read”) 权限调用 checkPermission。<br>如果重写此方法，那么通常应该在已重写方法将要抛出异常时调用 super.checkRead。<br>参数：<br>file - 取决于系统的文件名。<br>抛出：<br>SecurityException - 如果调用线程没有访问指定文件的权限。<br>NullPointerException - 如果 file 参数为 null。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;File-listFiles-源码分析&quot;&gt;&lt;a href=&quot;#File-listFiles-源码分析&quot; class=&quot;headerlink&quot; title=&quot;File.listFiles()源码分析&quot;&gt;&lt;/a&gt;File.listFiles()源码分析&lt;/h2&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Callable与Future</title>
    <link href="http://fanjinbo.github.io/2016/11/23/Callable%E4%B8%8EFuture/"/>
    <id>http://fanjinbo.github.io/2016/11/23/Callable与Future/</id>
    <published>2016-11-23T09:55:43.000Z</published>
    <updated>2016-11-25T08:01:16.853Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java.lang.SecurityManager</title>
    <link href="http://fanjinbo.github.io/2016/11/23/Java-lang-SecurityManager/"/>
    <id>http://fanjinbo.github.io/2016/11/23/Java-lang-SecurityManager/</id>
    <published>2016-11-23T09:45:58.000Z</published>
    <updated>2016-11-25T08:01:16.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jdk文档定义"><a href="#jdk文档定义" class="headerlink" title="jdk文档定义"></a>jdk文档定义</h2><p>安全管理器是一个允许应用程序实现安全策略的类。它允许应用程序在执行一个可能不安全或敏感的操作前确定该操作是什么，以及是否是在允许执行该操作的安全上下文中执行它。应用程序可以允许或不允许该操作。</p>
<p>SecurityManager 类包含了很多名称以单词 check 开头的方法。Java 库中的各种方法在执行某些潜在的敏感操作前可以调用这些方法。对 check 方法的典型调用如下：</p>
<pre><code>SecurityManager security = System.getSecurityManager();
if (security != null) {
    security.checkXXX(argument,  . . . );
}
</code></pre><p>因此，安全管理器通过抛出异常来提供阻止操作完成的机会。如果允许执行该操作，则安全管理器例程只是简单地返回，但如果不允许执行该操作，则抛出一个 SecurityException。该约定的唯一例外是 checkTopLevelWindow，它返回 boolean 值。</p>
<pre><code>getSecurityManager
public static SecurityManager getSecurityManager(){
      return security;
}
</code></pre><p>获取系统安全接口。</p>
<p>返回：<br>如果已经为当前应用程序建立了安全管理器，则返回此安全管理器；否则，返回 null。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jdk文档定义&quot;&gt;&lt;a href=&quot;#jdk文档定义&quot; class=&quot;headerlink&quot; title=&quot;jdk文档定义&quot;&gt;&lt;/a&gt;jdk文档定义&lt;/h2&gt;&lt;p&gt;安全管理器是一个允许应用程序实现安全策略的类。它允许应用程序在执行一个可能不安全或敏感的操作前确定该
    
    </summary>
    
    
      <category term="Java学习" scheme="http://fanjinbo.github.io/tags/Java%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
